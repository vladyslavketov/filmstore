{"mappings":"IAYAA,EAZa,CACXC,KAAMC,SAASC,cAAc,QAC7BC,OAAQF,SAASC,cAAc,UAE/BE,OAAQH,SAASC,cAAc,WAC/BG,MAAOJ,SAASC,cAAc,UAC9BI,cAAeL,SAASC,cAAc,+BACtCK,WAAYN,SAASC,cAAc,kBACnCM,MAAOP,SAASC,cAAc,WAE9BO,WAAYR,SAASC,cAAc,kBCRrCQ,OAAOC,iBAAiB,QAAS,KAC/BD,OAAOE,SAAS,EAAG,GCKnBb,EAAKC,KAAKa,UAAUC,OAAO,aAC3Bf,EAAKK,OAAOW,cAAcF,UAAUG,IAAI,WDL/B,IEDXN,OAAOC,iBAAiB,UAGxB,WACE,MAAMM,EAAoBP,OAAOQ,YAE7BD,EAAoB,IACtBlB,EAAKC,KAAKa,UAAUG,IAAI,eAEpBC,EAAoB,ICT1BlB,EAAKS,MAAMK,UAAUC,OAAO,YDUjBG,GAAqB,KCNhClB,EAAKS,MAAMK,UAAUG,IAAI,aDOdC,GAAqB,IAAIlB,EAAKC,KAAKa,UAAUC,OAAO,cACjE,IAXAf,EAAKS,MAAMG,iBAAiB,SCMrB,WACLD,OAAOE,SAAS,EAAG,EACrB,ICTOO,eAAeC,EAAUC,EAAaC,EAASC,GACpD,IAAIC,EACAC,EAAe,GAEnB,OAAQJ,GACN,IAAK,SACHG,EAAU,eACVC,EAAe,UAAUF,IACzB,MAEF,IAAK,UACHC,EAAU,UAAUF,IACpB,MAEF,IAAK,OACHE,EAAU,UAAUF,YACpB,MAEF,IAAK,UACHE,EAAU,UAAUF,YACpB,MAEF,IAAK,QACHE,EAAU,mBACV,MAEF,QACEE,QAAQC,IAAI,uBAGhB,OAAOC,MAAM,gCAAcJ,6CAA6BC,KAAgBI,MACtEC,GAAOA,EAAIC,QAEf,CCpCe,SAAAC,EAA+BC,GAC5C,MAAMC,GAAEA,EAAEC,MAAEA,EAAKC,KAAEA,EAAIC,YAAEA,EAAWC,aAAEA,EAAYC,UAAEA,GAAcN,EAC5DO,EAAaL,GAASC,EAGtBK,EAAcH,GAA8BC,EAGlD,MAAO,6HALU,kCAAkCF,oBAUvCG,sIAKyBA,gGAZxBC,EAAcA,EAAYC,MAAM,EAAG,GAAK,wFAgBUR,+DAGjE,CCzBe,SAAAS,EAA6BC,GAC1C,IAAIC,EAAU,GAGd,OAFe,IAAXD,IAAgBC,EAAU,WAEvB,sCAC0BA,iBAAuBD,sCAA2CA,MAAWA,gBAEhH,CCaO,SAASE,EAA8BC,GAC5C,GAAIA,EAAQ,EAAG,MAAO,GACtB,IAAIC,EAAa,GAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOE,GAAK,EAC9BD,EAAWE,KAAKD,EAAI,GAGtB,OAAOD,EAAWG,KAAIC,GAAQT,EAAoBS,KAAOC,KAAK,GAChE,ECrBAlC,iBACE,MAAMW,QAAYV,EAAU,SAEtBkC,GCViCC,EDShBzB,EAAI0B,QCTyBC,EDUAzB,GCT/C0B,MAAMC,QAAQJ,KAAiBA,EAAYK,OAAS,EAChD,mDACFL,EAAYJ,KAAIlB,GAAQwB,EAAiBxB,KAAOoB,KAAK,KAH/C,IAA0BE,EAAaE,EDWpD1D,EAAKU,WAAWoD,UAAYP,EAI9BnC,eAAgC4B,GAC9B,IAAKA,GAASA,EAAQ,EAAG,OAAQhD,EAAKQ,WAAWsD,UAAY,GAC7D9D,EAAKQ,WAAWsD,UAAYf,EAA8BC,EAC5D,CANEe,CAAiBhC,EAAIiC,YACvB,CARAC","sources":["src/common/js/refs.js","src/common/js/onLoad.js","src/components/loader/loader.js","src/common/js/onScroll.js","src/components/btns/btn-up/btn-up.js","src/api/api-tmdb.js","src/templates/createMovieCardMarkup.js","src/templates/paginationBtnMarkup.js","src/components/pagination/pagination.js","src/layouts/sections/movies/movies.js","src/common/js/createListMarkup.js"],"sourcesContent":["const refs = {\n  body: document.querySelector('body'),\n  header: document.querySelector('header'),\n\n  loader: document.querySelector('.loader'),\n  modal: document.querySelector('.modal'),\n  modalCloseBtn: document.querySelector('.backdrop .modal__close-btn'),\n  pagination: document.querySelector('div.pagination'),\n  btnUp: document.querySelector('.btn-up'),\n\n  moviesList: document.querySelector('.movies__list'),\n};\nexport default refs;","import { hideLoader } from '../../components/loader/loader';\n\nwindow.addEventListener('load', (() => {\n  window.scrollTo(0, 0);\n  hideLoader();\n}));\n\n// === інший синтаксис ===\n// window.onload = hideLoader();\n// ===  ===\n\n// refs.body.scrollTop();\n// refs.body.scrollIntoView(true);","import refs from '../../common/js/refs';\n\nexport function showLoader() {\n  refs.body.classList.add('isLoading');\n  refs.loader.parentElement.classList.remove('isHidden');\n}\n\nexport function hideLoader() {\n  refs.body.classList.remove('isLoading');\n  refs.loader.parentElement.classList.add('isHidden');\n}","import refs from './refs';\nimport { showBtnUp, hideBtnUp, onBtnUpClick } from '../../components/btns/btn-up/btn-up';\n\nwindow.addEventListener('scroll', onWindowScroll);\nrefs.btnUp.addEventListener('click', onBtnUpClick);\n\nfunction onWindowScroll() {\n  const windowPageYOffset = window.pageYOffset;\n\n  if (windowPageYOffset > 40) {\n    refs.body.classList.add('isScrolling');\n\n    if (windowPageYOffset > 500) showBtnUp();\n    else if (windowPageYOffset <= 500) hideBtnUp();\n  } else if (windowPageYOffset <= 40) refs.body.classList.remove('isScrolling');\n}","import refs from '../../../common/js/refs';\n\nexport function showBtnUp() {\n  refs.btnUp.classList.remove('isHidden');\n}\n\nexport function hideBtnUp() {\n  refs.btnUp.classList.add('isHidden');\n}\n\nexport function onBtnUpClick() {\n  window.scrollTo(0, 0);\n}","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '9cb79068ade378f45d510f1b7326cccd';\n\nexport async function getMovies(typeOfQuery, movieId, searchQuery) {\n  let options;\n  let queryOptions = '';\n\n  switch (typeOfQuery) {\n    case 'search':\n      options = `search/movie`;\n      queryOptions = `&query=${searchQuery}`;\n      break;\n\n    case 'details':\n      options = `/movie/${movieId}`;\n      break;\n\n    case 'cast':\n      options = `/movie/${movieId}/credits`;\n      break;\n\n    case 'reviews':\n      options = `/movie/${movieId}/reviews`;\n      break;\n\n    case 'trend':\n      options = `trending/all/day`;\n      break;\n\n    default:\n      console.log('Invalid typeOfQuery');\n  }\n\n  return fetch(`${BASE_URL}${options}?api_key=${API_KEY}${queryOptions}`).then(\n    res => res.json()\n  );\n}\n\n// ===== Деталі ================================================================================\n// /trending/get-trending список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\n// /search/search-movies пошук фільму за ключовим словом на сторінці фільмів.\n// /movies/get-movie-details запит повної інформації про фільм для сторінки кінофільму.\n// /movies/get-movie-credits запит інформації про акторський склад для сторінки кінофільму.\n// /movies/get-movie-reviews запит оглядів для сторінки кінофільму.\n// ================================================================================\n\n\n// ===== Альтернатива ================================================================================\n// export function getTrendingMovies() {\n//   return fetch(`${BASE_URL}trending/all/day?api_key=${API_KEY}`).then(res =>\n//     res.json()\n//   );\n// }\n\n// export function getSearchMovies(searchQuery) {\n//   return fetch(\n//     `${BASE_URL}search/movie?api_key=${API_KEY}&query=${searchQuery}`\n//   ).then(res => res.json());\n// }\n\n// export function getMovieDetails(movieId) {\n//   return fetch(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`).then(res =>\n//     res.json()\n//   );\n// }\n\n// export function getMovieDetailsCast(movieId) {\n//   return fetch(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`).then(\n//     res => res.json()\n//   );\n// }\n\n// export function getMovieDetailsReviews(movieId) {\n//   return fetch(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`).then(\n//     res => res.json()\n//   );\n// }","export default function createMovieCardMarkup(data) {\n  const { id, title, name, poster_path, release_date, firstDate } = data;\n  const movieTitle = title || name;\n  const movieImg = `https://image.tmdb.org/t/p/w500${poster_path}`;\n  const movieCategory = 'rock';\n  const releaseDate = release_date ? release_date : firstDate;\n  const year = releaseDate ? releaseDate.slice(0, 4) : '';\n\n  return `\n    <li class=\"movie-card animate__animated animate__zoomIn\">\n      <img\n        class=\"movie-card__img\"\n        src=${movieImg}\n        alt=${movieTitle}\n        width=\"300\"\n        height=\"450\"\n      />\n      <div class=\"movie-card__desc\">\n        <p class=\"movie-card__title\">${movieTitle}</p>\n        <p class=\"movie-card__category\">${movieCategory}</p>\n        <p class=\"movie-card__year\">${year}</p>\n      </div>\n      <button type=\"button\" class=\"movie-details__btn\" data-id=${id} aria-label=\"to open movie details\"></button>\n    </li>\n  `;\n}\n\n// TODO - додати data-filter=${category}","export default function paginationBtnMarkup(number) {\n  let current = \"\";\n  if (number === 1) { current = \"current\" }\n  \n  return `\n    <button class=\"paginationBtn ${current}\" data-page=\"${number}\" aria-label=\"to open page number ${number}\">${number}</button>\n  `;\n}","import paginationBtnMarkup from '../../templates/paginationBtnMarkup';\n\n// === дізнаємось номер поточної сторінки з дата атрибуту на кнопці, по на якій відбувся евент===\nexport function getCurrentPage(e) {\n  if (!e) return 1;\n  return e.target.dataset.page;\n}\n\nexport function getCurrentItemsPerPage(arrayOfData, perPage = 20 , currentPage = 1) {\n  if (!Array.isArray(arrayOfData)) return [];\n\n  const start = (currentPage - 1) * perPage;\n  const end = start + perPage;\n  const itemsPerPage = arrayOfData.slice(start, end);\n\n  return itemsPerPage;\n}\n\n// === створюємо розмітку списку кнопок пагінації з шаблону === //\n// TODO - додати перевірку і якщо 1 сторінка, то не запускати функцію\nexport function createPaginationBtnListMarkup(pages) {\n  if (pages < 2) return '';\n  let arrayOfBtn = [];\n\n  for (let i = 0; i < pages; i += 1) {\n    arrayOfBtn.push(i + 1);\n  }\n\n  return arrayOfBtn.map(item => paginationBtnMarkup(item)).join('');\n}","import { getMovies } from '../../../api/api-tmdb';\nimport refs from '../../../common/js/refs';\nimport createMovieCardMarkup from '../../../templates/createMovieCardMarkup';\nimport createListMarkup from '../../../common/js/createListMarkup';\nimport { createPaginationBtnListMarkup } from '../../../components/pagination/pagination';\n\nonfirstLoad();\n\nasync function onfirstLoad() {\n  const res = await getMovies('trend');\n  const trendingMovies = res.results;\n  const listMarkup = createListMarkup(trendingMovies, createMovieCardMarkup);\n  refs.moviesList.innerHTML = listMarkup;\n  renderPagination(res.total_pages);\n}\n\nasync function renderPagination(pages) {\n  if (!pages || pages < 2) return (refs.pagination.innerHTML = ''); // TODO -  передивитись блок іф\n  refs.pagination.innerHTML = createPaginationBtnListMarkup(pages);\n}\n\n\n\n\n// =========\n// const PER_PAGE = 20;\n// const pages = Math.ceil(trendingMovies.length / PER_PAGE);","// TODO 1 - add inforation in answer\nexport default function createListMarkup(arrayOfData, createItemMarkup) {\n  if (!Array.isArray(arrayOfData) || !arrayOfData.length > 0)\n    return 'Нажаль данні не завантажились( Спробуйте пізніше'; // TODO 1\n  return arrayOfData.map(data => createItemMarkup(data)).join('');\n}"],"names":["$07f5a4e5854dd40e$export$2e2bcd8739ae039","body","document","querySelector","header","loader","modal","modalCloseBtn","pagination","btnUp","moviesList","window","addEventListener","scrollTo","classList","remove","parentElement","add","windowPageYOffset","pageYOffset","async","$c6feac49e3432087$export$60e1c8f5f122c5ac","typeOfQuery","movieId","searchQuery","options","queryOptions","console","log","fetch","then","res","json","$431b21e7d8ed4ba3$export$2e2bcd8739ae039","data","id","title","name","poster_path","release_date","firstDate","movieTitle","releaseDate","slice","$315e90768ca3edda$export$2e2bcd8739ae039","number","current","$6495377852be1188$export$b41e8733ea79562e","pages","arrayOfBtn","i","push","map","item","join","listMarkup","arrayOfData","results","createItemMarkup","Array","isArray","length","innerHTML","$55b846596b28c106$var$renderPagination","total_pages","$55b846596b28c106$var$onfirstLoad"],"version":3,"file":"index.bf703909.js.map"}